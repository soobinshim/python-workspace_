1.
미로 탈출하기 ! 게임 만들기
2차원 list를 활용하여 미로를 탈출하는 게임을 만드세요!
방향키는 w 는위로 s는 아래로 a는 왼쪽 b는 오른쪽 이동

■ ->벽(2) △->현재위치(1) □->갈수 있는 길(0) ★->목표(3)

벽으로는 지나갈 수 없습니다.

hint)
li =[
[2,2,2,2,2,2,2,2],
[2,1,0,0,0,0,0,2],
[2,2,2,0,0,2,2,2],
[2,2,2,0,0,0,0,2],
[2,2,2,0,2,2,0,2],
[2,0,0,0,2,2,0,2],
[2,0,2,2,2,0,0,0,3],
[2,2,2,2,2,2,2,2],
]
초기값 x,y=1,1

초기화면에서 방향키 a를 눌러서 벽으로 이동시
■ ■ ■ ■ ■ ■ ■ ■
■ △ □ □ □ □ □ ■
■ ■ ■ □ □ ■ ■ ■
■ ■ ■ □ □ □ □ ■
■ ■ ■ □ ■ ■ □ ■
■ □ □ □ ■ ■ □ ■
■ □ ■ ■ ■ □ □ □ ★
■ ■ ■ ■ ■ ■ ■ ■
현재위치 △  입니다. ★  위치로 탈출하세요.
방향키 : 위로 w, 아래로 s, 오른쪽으로 d, 왼쪽으로a
>>>>a
게임 종료 키 : o
벽입니다.

■ ■ ■ ■ ■ ■ ■ ■
■ △ □ □ □ □ □ ■
■ ■ ■ □ □ ■ ■ ■
■ ■ ■ □ □ □ □ ■
■ ■ ■ □ ■ ■ □ ■
■ □ □ □ ■ ■ □ ■
■ □ ■ ■ ■ □ □ □ ★
■ ■ ■ ■ ■ ■ ■ ■
현재위치 △  입니다. ★  위치로 탈출하세요.
방향키 : 위로 w, 아래로 s, 오른쪽으로 d, 왼쪽으로a

방향키 입력: d
■ ■ ■ ■ ■ ■ ■ ■
■ □ △ □ □ □ □ ■
■ ■ ■ □ □ ■ ■ ■
■ ■ ■ □ □ □ □ ■
■ ■ ■ □ ■ ■ □ ■
■ □ □ □ ■ ■ □ ■
■ □ ■ ■ ■ □ □ □ ★
■ ■ ■ ■ ■ ■ ■ ■

방향키 입력:d
■ ■ ■ ■ ■ ■ ■ ■
■ □ □ △ □ □ □ ■
■ ■ ■ □ □ ■ ■ ■
■ ■ ■ □ □ □ □ ■
■ ■ ■ □ ■ ■ □ ■
■ □ □ □ ■ ■ □ ■
■ □ ■ ■ ■ □ □ □ ★
■ ■ ■ ■ ■ ■ ■ ■

방향키 입력:s
■ ■ ■ ■ ■ ■ ■ ■
■ □ □ □ □ □ □ ■
■ ■ ■ △ □ ■ ■ ■
■ ■ ■ □ □ □ □ ■
■ ■ ■ □ ■ ■ □ ■
■ □ □ □ ■ ■ □ ■
■ □ ■ ■ ■ □ □ □ ★
■ ■ ■ ■ ■ ■ ■ ■


2. 
리스트에 5일간의 저가, 고가 정보가 저장돼 있다. 고가와 저가의 차를 변동폭이라고 정의할 때, low(저가), high(고가) 두 개의 리스트를 사용해서 5일간의 변동폭(high-low)을 리스트에 저장하라.
#힌트
#volatility = []
#append()


3.
리스트 중에 홀수에만 2를 곱하여 저장하고 출력하세요 
# 리스트 : [1, 2, 3, 4, 5] 


4.
# 알파벳 소문자로 이루어진 단어를 입력받고 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.
# - 길이가 짧은 것부터
# - 길이가 같으면 사전 순으로
##  '1.단어입력' 없이 '2.단어출력' 할 경우 '입력된 단어가 없습니다.' 문구 출력
##  banana,pear,apple,peach 순으로 단어입력 할때 단어를 사전순 정렬하면 ['apple', 'banana', 'peach', 'pear']로 출력

'''출력 예시
====================
1. 단어입력  2. 단어출력  3. 종료
>>>> 
'''








-----------------풀이------------------------
1.
li =[
[2,2,2,2,2,2,2,2],
[2,1,0,0,0,0,0,2],
[2,2,2,0,0,2,2,2],
[2,2,2,0,0,0,0,2],
[2,2,2,0,2,2,0,2],
[2,0,0,0,2,2,0,2],
[2,0,2,2,2,0,0,0,3],
[2,2,2,2,2,2,2,2],
]
x,y=1,1
import os
while True:
    os.system('cls')
    for i in li:
        for j in i:
            if j ==0:
                print("□",end=" ")
            elif j==1:
                print('△',end=" ")
            elif j==3:
                print('★',end=" ")
            else:
                print("■",end=" ")
        print()
    print("현재위치 △  입니다. ★  위치로 탈출하세요.")
    key = input("방향키 : 위로 w, 아래로 s, 오른쪽으로 d, 왼쪽으로a\n>>>>")
    print("게임 종료 키 : o") 
    #리스트 2 -> 벽, 0이 지나갈수 있는 통로, 1이 현재위치
    li[x][y]=0
    dx=x; dy=y # 이동 전 초기값

    if key == 'w':
        x-=1        
    elif key =='s':
        x+=1
    elif key =='d':
        y+=1
    elif key == 'a':
        y-=1
    elif key == 'o':
        print("게임이 종료됩니다.")
        break
    else:
        print("방향키를 확인하세요.")   

    if li[x][y]==2:
        print("벽입니다.")
        os.system("pause")
        x=dx
        y=dy
    else:
        li[x][y]=1

    li[x][y]=1

    if li[6][8]==1:
        print("미로를 탈출하셨습니다!")
        break


2.
volatility = []
for i in range(len(low_prices)) :
    volatility.append(high_prices[i] - low_prices[i])


3.
numbers = [1, 2, 3, 4, 5] 
result = []
      
for n in numbers:
     if n % 2 == 1:
         result.append(n*2)     
print(result) 


4.
words=[]
while True:
    print('='*20)
    print('1. 단어입력  2. 단어출력  3. 종료')
    option = input('>>>> ')
    if option == '1':
        word=input('단어 입력 : ')
        if words.count(word) != 0:
            print('이미 존재하는 단어입니다.')
        else:
            words.append(word)
            print(word, '저장 완료')
    elif option == '2':
        if len(words) == 0:
            print('입력된 단어가 없습니다.')
            continue
        words.sort()
        print(words)
    elif option == '3':
        print('종료합니다.')
        break